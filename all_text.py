from random import randint
from emoji import emojize

import config

# emoji dict
emoji = {
    "e_hello" : emojize(":waving_hand:"),
    "e_gear" : emojize(":gear:"),
    "e_condiction" : [
        emojize(":cross_mark:"),
        emojize(":check_mark_button:")
    ]
}


# keyboard text
keyboard_text_start = "Что вы хотите сделать?"


# start text
start_main_text = """

Я ваш помочник с экономическими задачами Аркадий!

Я могу помочать вам решить следующие задачи:
- Построить общую КПВ
- Найти точку рыночного равновесия [ТРР]
- Расчитать объем дефицита/излишка [ДиИ] 
  для заданных функций спроса и предложения и уровня цены
- Расчитать прибыль фирмы

Если у Вас есть вопросы, введите /help, и я постараюсь вам помочь
"""
second_start_main_text = "Что вы хотите сделать?"


#help text
help_main_text = """
Возникли вопросы по командам?

Я помогу вам разобраться с ними!

Просто выберите о каком пункте Вы хотите узнать подробней
1 - построение общей КПВ
2 - нахождение точки рыночного равновесия
3 - расчет объема дефицита/излишка
4 - расчет прибыля фирмы
"""

help_question_text = "Что-нибудь еще?"

help_point_text = [

        """
Построение графика КПВ.
(КПВ - Кривая Производственных Возможностей)

Тут все просто!

Вы вводите максимальное количество товаров А и Б для двух производителей.

Я же строю для тебя график, который показиывает общую КПВ для этих товаров.

P.S. Так как я не являюсь мощным вычислительным средством, то лимит на количество товаров будет составлять 10000
Если он будет превышен, то я автоматически снижу количество до максимального значения.
""",

        """
Нахождение точки рыночного равновесия.

Ничего сложного тут нет!

Заданы функции спроса и предложения:

Qd = A*P - B (функция спроса)
Qs = C - D*P (функция предложения)

Вы вводите коэффициенты A, B, C и D, а я рассчитаю вам равновесную цену P и равновесный объем Q

Равновесная цена P и равновесный объем Q - параметры рыночного равновесия.
""",

        """
Расчет объема дефицита/излишка для заданных функций спроса и предложения и уровня цены.

Хоть само задание и звучит страшно, ничего сложного тут нет!

Заданы функции спроса и предложения:

Qd = A*P - B (функция спроса)
Qs = C - D*P (функция предложения)

Вы вводите коэффициенты A, B, C, D и уровень цены E.

Я же в свою очередь вычислаю равновесную цену P, после сравниваю ее с уровнем цены E.

Из этого сравнения мы оперделяем, что перед нами дефицит/излишек/равновесие.

При равновесии я просто сообщу Вам, о том, что заданный уровень цены E равен равновесной цене P.

В ином случае, я дам Вам знать о том, что перед нами 
дефицит/излишек, и о том, какой размер составляет этот дефицит/излишек
""",

        """
Расчет прибыли фирмы.

Тут тоже все просто!

Вам нужно будет ввести следующие данные:
 - объем производства в штуках Q
 - цена в штуках P
 - постояные издержки FC
 - переменные издержки на единицу продукции VC

Стоит чуть подробнее сказать про ввод FC и VC.
Их необходимо вводить в таком виде:
 - название издержки, размер издержки
(название должно состоять только из символов алфавита, а размером может быть только положительное число)
 
Если издержек несколько, то их нужно разделять точкой с запятой (;):
 - название издержки 1, размер издержки 1; название издержки 2, размер издержки 2

Количество издержек должно быть не больше пяти.

Если издержек нет, то нажмите на соответствующую кнопку.

Итак, после ввода всех данных, я посчитаю размер прибыли/убытка и выведу его вам.
"""
    ]


# settings text
# base solution text
solution_flag_text = f"""
{emoji['e_gear']}Настройки{emoji['e_gear']}
Показывать решение для расчета ТРР: {emoji['e_condiction'][config.solution_ep_flag]}
Показывать решение для определения ДиИ: {emoji['e_condiction'][config.solution_def_surp_flag]}
"""


# solution text
# update solution text func 
def update_solution_text(solution_ep_flag_id, solution_def_surp_flag_id):
    global solution_flag_text

    solution_flag_text = f"""
{emoji['e_gear']}Настройки{emoji['e_gear']}
Показывать решение для расчета ТРР: {emoji['e_condiction'][solution_ep_flag_id]}
Показывать решение для определения ДиИ: {emoji['e_condiction'][solution_def_surp_flag_id]}
"""


# func for create solution text for equilibrium point
def create_solution_ep_text(A: float, B: float, C: float, D: float, P: float, Q: float) -> str:
    text = f"""
Функции спроса и предложения задаются следующим образом:

Qd = {A}*P {'-' if B > 0 else '+'} {abs(B)} (функция спроса)
Qs = {C} {'-' if D > 0 else '+'} {abs(D)}*P (функция предложения)

Для нахождения ТРР, то есть параметров равновесия, приравняем функцию спроса к функции предложения:

Qd = Qs
{A}*P {'-' if B > 0 else '+'} {abs(B)} = {C} {'-' if D > 0 else '+'} {abs(D)}*P
{A + D}*P = {round(C + B, 2)}

P = {P} - равновесная стоимость

Чтобы найти равновесный объем, подставим равновесную стоимость в любую из функций спроса или предложения:

Q = {A}*{P} {'-' if B > 0 else '+'} {abs(B)}

Q = {Q}
"""
    return text


# func for create solution text for deficit and surplus
def create_solution_def_surp_text(A: float, B: float, C: float, D: float, E: float,
                                  P: float, Qd: float, Qs: float, Q: float,
                                  condition: str) -> str:
    support_comparison_text = "P = E" if condition == "равновесия" else f"""
P {'>' if condition == "дефицита" else '<'} E

Значит на рынке будет ситуация {condition}.

Расчитаем размер {condition}.
Для этого необходимо вычислить разницу между Qd и Qs:

Qd = {A}*{E} {'-' if B > 0 else '+'} {abs(B)} = {A*E - B}
Qs = {C} {'-' if D > 0 else '+'} {abs(D)}*{E} = {C - D*E}

{'Так как Qd меньше нуля, приравниваем ее к нулю' if (A*E - B) < 0 else ''} \
{'Так как Qs меньше нуля, приравниваем ее к нулю' if (C - D*E) < 0 else ''}

Таким образом, имеем:

Qd = {Qd}
Qs = {Qs}

Разница между величиной спроса и предложения (Q) будет равна:

Q = |{'Qd - Qs' if condition == 'дефицита' else 'Qs - Qd'}|

Q = |{Qd if condition == 'дефицита' else Qs} - {Qs if condition == 'дефицита' else Qd}|

Q = {Q}

"""
        

    text = f"""
Функции спроса и предложения задаются следующими функциями:

Qd = {A}*P {'-' if B > 0 else '+'} {abs(B)} (функция спроса)
Qs = {C} {'-' if D > 0 else '+'} {abs(D)}*P (функция предложения)

Для определения дефицита/излишка, найдем ТРР.
Для этого приравняем функцию спроса к функции предложения:

Qd = Qs
{A}*P {'-' if B > 0 else '+'} {abs(B)} = {C} {'-' if D > 0 else '+'} {abs(D)}*P
{A + D}*P = {round(C + B, 2)}

P = {P} - равновесная стоимость

Далее сравним равновесную цену P с заданной ценой товара E:
{support_comparison_text}

"""
    return text


# func for create profit answer text
def create_answer_profit_text(
        q: int, p: int, vc: int, fc: int, profit: int,
        vc_text: str, fc_text: str, result_text: str) -> str:
    
    text = f"""
При реализации {q} единиц продукции 
по {p} руб. за единицу товара и уровне 
переменных издержек в {vc} руб./единицу товара {vc_text}

и постоянных издержек в {fc} руб. {fc_text},

{result_text} составит: {abs(profit)} руб.
"""
    return text


# request text
# graph 
graph_request = [
    "Введите максимальный объем производства товара А для первого производителя",
    "Введите максимальный объем производства товара Б для первого производителя",
    "Введите максимальный объем производства товара А для второго производителя",
    "Введите максимальный объем производства товара Б для второго производителя"
]
# equilibrium point
ep_request = [
    "Введите коэффициент A",
    "Введите коэффициент B",
    "Введите коэффициент C",
    "Введите коэффициент D"
]
# deficite and surplus
def_surp_request = [
    "Введите коэффициент A",
    "Введите коэффициент B",
    "Введите коэффициент C",
    "Введите коэффициент D",
    "Введите уровень цены Е"
]
# profit
profit_request = [
    "Введите объем производства в штуках",
    "Введите цену в штуках (руб. за единицу товара)",
    "Введите данные о постоянных издержках \n (название издержки - размер издержки)",
    "Введите данные о переменных издержках \n (название издержки - размер издержки)"
]

# filter answer text
incorrect_message_text = "Извините, но я не понимаю вас"
incorrect_settings_data_text = "Прошу использовать только приведенные ниже кнопки"
incorrect_num_text = "Прошу вводить только числа"
incorrect_negative_num_text = "Прошу вводить положительные числа"
incorrect_zero_message_text = "Прошу вводить числа не равные нулю"
incorrect_profit_data_text = "Извините, но, кажется, Вы ввели неверные данные"
incorrect_profit_num_data_text = "Прошу введите меньше видов издержек" 

incorrect_command = """
Хотел бы я поболтать, но нужно заняться делом!
Прошу, выберите, что хотите сделать
"""

correct_data_example = f"Пример вводимых данных: {randint(20, 600)}"


# buttons text
button_graph = 'Построить общую КПВ.'
button_equilibrium_point = 'Найти ТРР.'
button_deficit_and_surplus = 'Определить дефицит/излишек.'
button_profit = 'Рассчитать прибыль фирмы.'

button_none_costs = 'Издержек нет.'

button_back_to_menu = 'Вернуться на главную.'

button_switch_solution = {
    "ep" : [
        'Включить решение ТРР',
        'Выключить решение ТРР'
    ],
    
    "def_surp" : [
        'Включить решение ДиИ',
        'Выключить решение ДиИ'
    ]
}

button_help_1 = '1'
button_help_2 = '2'
button_help_3 = '3'
button_help_4 = '4'

button_indev = 'Кнопка еще не готова' 
